{"version":3,"sources":["auth.js","AuthRoute.js","Routes/Home.js","Routes/Profile.js","NotFound.js","LoginForm.js","LogoutButton.js","App.js","index.js"],"names":["users","id","password","name","AuthRoute","authenticated","Component","render","console","log","props","to","pathname","state","from","location","Home","List","styled","li","Container","div","Detail","Divider","span","Profile","user","NotFound","LoginForm","login","useState","setId","setPassword","value","onChange","target","type","placeholder","onClick","e","alert","withRouter","logout","history","push","App","setUser","find","undefined","Error","signIn","exact","path","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1501e200.chunk.js","sourcesContent":["\r\n// 현재 유저의 아이디와 password 정보\r\nconst users = [\r\n    { id: 'a', password: '123', name: 'Kim' },\r\n    { id: 'b', password: '456', name: 'Lee' },\r\n    { id: 'abc', password: '789', name: 'Park' }\r\n]\r\n\r\n// id 와 password 를 users 와 비교\r\nexport function signIn({ id, password }) {\r\n    const user = users.find(user => user.id === id && user.password === password);\r\n    if (user === undefined) throw new Error();\r\n    return user;\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nfunction AuthRoute({ authenticated, Component, render }) {\r\n    console.log(render);\r\n    return (\r\n        <Route\r\n            render={props =>\r\n                authenticated ? (\r\n                    // 인증이 되어 있을 경우 그대로 렌더링\r\n                    render ? render(props) : <Component {...props} />\r\n                ) : (\r\n                    // 로그인에 실패할 경우 login 으로 리다이렉트\r\n                    <Redirect\r\n                        to={{ pathname: '/login', state: { from: props.location } }}\r\n                    />\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default AuthRoute;\r\n","import React from \"react\";\r\n\r\nfunction Home() {\r\n    return (\r\n        <>\r\n            <h1>Home</h1>\r\n            <p>메인 화면</p>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst List = styled.li`\r\ndisplay: flex;\r\nmargin: 10px;\r\n`\r\nconst Container = styled.div`\r\njustfy-contents: center;\r\n`\r\n\r\nconst Detail = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nborder: 1px solid black;\r\nwidth: 20%;\r\n`\r\n\r\nconst Divider = styled.span`\r\nmargin: 0px 10px;\r\n`\r\nfunction Profile({ user }) {\r\n    const { id, password, name } = user;\r\n    return (\r\n        <Container>\r\n            <h1>Profile</h1>\r\n            <Detail>\r\n                <List>ID: <Divider />\r\n                    {id}</List>\r\n                <List>Password: <Divider />\r\n                    {password}</List>\r\n                <List>Name:  <Divider />\r\n                    {name}</List>\r\n            </Detail>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\n\r\nfunction NotFound() {\r\n    return (\r\n        <>\r\n            <h1>Not Found</h1>\r\n            <p>페이지를 못 찾았습니다</p>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NotFound;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nfunction LoginForm({ authenticated, login, location }) {\r\n  const [id, setId] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  // 로그인 버튼 클릭시 함수 실행\r\n  const handleClick = () => {\r\n    try {\r\n      login({ id, password });\r\n    } catch (e) {\r\n      alert('로그인에 실패했습니다');\r\n      setId('');\r\n      setPassword('');\r\n    }\r\n  };\r\n\r\n  // 로그인을 했을 때 그 전 위치값을 from 으로 가져옴\r\n  const { from } = location.state || { from: { pathname: \"/\" } };\r\n  console.log(from);\r\n  // 로그인 성공 이후 이전 위치로 Redirect\r\n  if (authenticated) return <Redirect to={from} />;\r\n\r\n  return (\r\n    <>\r\n      <h1>Login</h1>\r\n      {/* id 가져오기  */}\r\n      <input\r\n        value={id}\r\n        onChange={({ target: { value } }) => setId(value)}\r\n        type=\"text\"\r\n        placeholder=\"id\"\r\n      />\r\n      {/* password 가져오기  */}\r\n      <input\r\n        value={password}\r\n        onChange={({ target: { value } }) => setPassword(value)}\r\n        type=\"password\"\r\n        placeholder=\"password\"\r\n      />\r\n      <button onClick={handleClick}>Login</button>\r\n\r\n      <h2>등록된 아이디와 비밀번호</h2>\r\n\r\n      <h4>id: 'a', password: '123', name: 'Kim' </h4>\r\n      <h4> id: 'b', password: '456', name: 'Lee'  </h4>\r\n      <h4> id: 'abc', password: '789', name: 'Park' </h4>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction LogoutButton({ logout, history }) {\r\n    // logout 버튼 누를 시 루트로 이동\r\n    const handleClick = () => {\r\n        logout();\r\n        history.push('/');\r\n    }\r\n    return <button onClick={handleClick}>Logout</button>;\r\n}\r\n\r\n\r\n// withrouter 로 히스토리 포함해서 export\r\nexport default withRouter(LogoutButton);","import React, { useState } from 'react';\nimport { Link, Route, Switch, BrowserRouter as Router } from 'react-router-dom';\n\nimport { signIn } from './auth';\nimport AuthRoute from './AuthRoute';\n\nimport Home from './Routes/Home';\nimport Profile from './Routes/Profile';\nimport NotFound from './NotFound';\nimport LoginForm from './LoginForm';\nimport LogoutButton from './LogoutButton';\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const authenticated = user != null;\n\n  const login = ({ id, password }) => setUser(signIn({ id, password }));\n  const logout = () => setUser(null);\n\n  return (\n    <Router>\n      <header>\n        <Link to=\"/\">\n          <button>Home</button>\n        </Link>\n        <Link to=\"/profile\">\n          <button>Profile</button>\n        </Link>\n        {/* login 상태 확인 */}\n        {authenticated ? (\n          <LogoutButton logout={logout} />\n        ) : (\n          <Link to=\"/login\">\n            <button>Login</button>\n          </Link>\n        )}\n      </header>\n      <main>\n        <Switch>\n          {/* exact 로 다른 경로에서도 루트로 오지 않도록 설정*/}\n          <Route exact path=\"/\" component={Home} />\n          {/* login 화면으로 현재 로그인 상태 rest 연산자로 나머지 prop 전달*/}\n          <Route\n            path=\"/login\"\n            render={props => (\n              <LoginForm authenticated={authenticated} login={login} {...props} />\n            )}\n          />\n          {/* profile 화면으로 로그인 상태 시 이동*/}\n          <AuthRoute\n            authenticated={authenticated}\n            path=\"/profile\"\n            render={props => <Profile user={user} {...props} />}\n          />\n          {/* 경로가 정해지지 않을 경우 notFound */}\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}